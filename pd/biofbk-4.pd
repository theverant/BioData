#N canvas 274 58 2063 1226 12;
#X declare -lib Gem;
#X declare -path else;
#X obj 30 -88 declare -lib Gem;
#X obj 194 440 gemhead;
#X floatatom 339 1164 5 0 0 0 - - - 0;
#X floatatom 384 1163 5 0 0 0 - - - 0;
#X floatatom 431 1164 5 0 0 0 - - - 0;
#X msg 295 -324 create;
#X obj 361 -256 gemwin;
#X msg 424 -338 1;
#X msg 459 -336 0;
#X obj 249 968 pix_multiimage;
#X floatatom 346 933 5 0 0 0 - - - 0;
#X obj 321 1289 pix_texture;
#X obj 321 1217 rotateXYZ;
#X obj 339 1132 r x;
#X obj 384 1130 r y;
#X obj 431 1132 r z;
#X obj 664 -261 netreceive -u -b;
#X obj 666 -186 oscparse;
#X obj 409 167 print;
#X obj 670 -96 list trim;
#X obj 672 -3 route blink;
#X obj 352 66 +;
#X obj 404 68 int;
#X msg 289 446 open ../images/planets*.jpg 12;
#X obj 389 121 mod 13;
#X obj 806 171 route respiration;
#X obj 573 -395 loadbang;
#X obj 964 207 route heart;
#X obj 1079 259 route skin;
#X obj 966 252 s heart;
#X obj 805 209 s respiration;
#X obj 1079 306 s skin;
#X obj 266 400 loadbang;
#X obj 465 1431 r respiration;
#X obj 326 1819 sphere;
#X obj 344 1687 r heart;
#X floatatom 346 1779 5 0 0 0 - - - 0;
#X obj 323 1621 colorRGB 1 1 1 1;
#X floatatom 369 1397 5 0 0 0 - - - 0;
#X obj 368 1369 r skin;
#X floatatom 463 1456 5 0 0 0 - - - 0;
#X obj 463 1494 * 1;
#X obj 34 -149 declare -path else;
#X obj 345 1739 * 3;
#X floatatom 1323 373 6 0 0 0 - - - 0;
#X floatatom 1544 473 7 0 0 0 - - - 0;
#X floatatom 1643 518 7 0 0 0 - - - 0;
#X floatatom 1725 558 5 0 0 0 - - - 0;
#X obj 1324 417 s delta;
#X obj 1540 514 s theta;
#X obj 1639 550 s alpha;
#X obj 1724 593 s beta;
#X msg 661 -348 listen 12345;
#X obj 1263 293 list split 3;
#X obj 1329 332 list split 1;
#X obj 1543 436 list split 1;
#X obj 1645 483 list split 1;
#X obj 1726 529 list split 1;
#X floatatom 1795 598 5 0 0 0 - - - 0;
#X obj 1796 569 list split 1;
#X obj 1794 633 s gamma;
#X obj 1005 500 t b f;
#X floatatom 1017 631 5 0 0 0 - - - 0;
#X obj 934 689 +;
#X obj 986 689 int;
#X obj 936 749 mod 13;
#X floatatom 934 783 5 0 0 0 - - - 0;
#X obj 1011 561 expr if ($f2 >= 5 \, 1 \, 0);
#X text 805 241 s = send;
#X text 341 1105 r = receive;
#X text 766 262 send respiration;
#X text 938 284 send heart;
#X text 1077 334 send skin;
#X text 1259 232 From here on down \, these are the brain waves;
#X text 515 1507 The *1 object under respiration must control opacity?;
#X text 1058 486 trigger bang float;
#X text 453 1611 manipulation object: colorRGB 1 = gemlist \, 2 = red \, 3 = green \, 4 = blue \, 5 = alpha;
#X text 569 1426 recieve respiration - on the hot inlet;
#X text 415 1284 pix object: apply texture mapping uses the image as a texture on a geo 1 = gemlist \, and other messages;
#X text 404 1686 receive heart on hot inlet;
#X text 380 1812 geometric object: renders a sphere Inlet 1 = gemlist \, message: draw (line \, fill \, point) Inlet 2 = float: size Inlet 3: int: number of segments;
#X text 380 1735 Heart value x 3 enters 2nd inlet to affect the size of the sphere.;
#X text 643 -399 starts patch running on start up.;
#X text 338 398 starts path running on start up;
#X text 7 462 connects objects to the gem window;
#X text 32 -326 creates the gemwindow for the image;
#X text 198 -233 gemwindow where images appear;
#X text 270 66 counter:;
#X text 64 185 print: sends information to the console for debugging.;
#X text 443 100 mod: outputs remainder;
#X text 808 148 Route = checks for argument and fetches corresponding data;
#X text 1312 441 sending delta waves;
#X text 1521 386 Nothing is currently receiving theta \, alpha \, beta or gamma waves.;
#X text 1058 502 Is the float the direct value from the Delta Waves?;
#X text 864 690 counter:;
#X text 762 739 mod: outputs remainder;
#X text 735 754 but what is being divided?;
#X text 1444 -41 What is the blink? Is this referring to eyes blinking with the EEG? or is it a specific function?;
#X text 751 845 resulting integer changes the image;
#X text 280 996 pix source: pix loads multiple image files.;
#X text 283 1015 Inlet 1 = gemlist \, file \; inlet 2 = select image from integer;
#X text 466 1127 where are x \, y \, and z being received from? It looks like they control the rotation of the sphere;
#X text 419 1362 receive skin on the cold inlet that controls red vs cyan;
#X text 461 1539 If respiration controls opacity \, why is using the green and blue inlets instead of the alpha inlet?;
#X text 1442 -260 This takes the OSC packets and converts them into PD messages. OSC is sound control... why are the sensors sending data in OSC instead of binary? Wouldn't binary slip packets have less latency and be more reactive in real time?;
#X text 496 1169 are the xyz values random? or are they related to a sensor?;
#X text 496 1187 I want all image manipulations to be controlled by sensors.;
#X text 519 1461 It appears that both skin and respiration are controlling colour on the RGB inlets.;
#X text 446 -302 1 starts the animation;
#X text 445 -286 0 stops it in run mode;
#X text 773 -354 Listen to port #12345 (this is the default port in the open BCI software \, and is used in arduino for biosynth as well);
#X text 781 -315;
#X text 1015 -266 -b = binary;
#X text 801 -280 recieve from network:;
#X text 806 -265 -u = udp (internet protocol);
#X text 733 -185;
#X text 755 -69;
#X text 801 -246 netreceive ouputs an osc list;
#X text 755 -197 OSC parse takes in an OSC list and outputs a pd message list;
#X text 758 -96 list trim splits the message list into individual messages.;
#X text 775 -10;
#X text 788 2;
#X text 287 30 Native way of counting;
#X text 439 69;
#X text 446 50 int: starts at 0;
#X text 448 79 0+3 = 3 (number does not change on 0);
#X text 447 64 1+0 = 1 (number changes on 1);
#X text 440 114 circular arithmetic;
#X text 445 127 a way of cleanly making loop;
#X text 445 138 a way of wrapping numbers back past a maximum;
#X text 464 151 12 images needs 13 for a remainder of 0;
#X text 489 193 counts blinks \; does not affect anything;
#X text 485 209 to use blink \, connect to mod 13;
#X text 786 -17 eyes blinking: Open BCI goes Python \;;
#X text 784 2 Python sends 1 = blink and 0 = no blink;
#X text 34 -126;
#X text 178 -149 -else is a pure data library;
#X text 30 -66;
#X text 161 -86 -gem is a pure data gem library;
#X text 1470 308;
#X text 1445 -186 OSC is stable and is really good at maintaining mapping. JJM found that binary would drop some data and not be able to parse correctly.Open BCI outputs OSC.;
#X text 1370 269 Open BCI ouputs 1 OSC packet of 3 lists of the five brainwaves at a time. list split divides packet into the three lists of 5 bands.;
#X text 1133 375 float value from Open BCI;
#X text 1312 459 not currently being received;
#X text 815 416;
#X text 860 434 Detecting the blink without Python;
#X text 1075 585 If the float value >= 5 then it outputs a 1;
#X text 1077 605 If it is less than 5 it outputs a 0;
#X text 1024 583;
#X text 1024 601;
#X text 858 450 This method requires less setup;
#X text 988 708;
#X text 1022 689 int: starts at 0;
#X text 1024 718 0+3 = 3 (number does not change on 0);
#X text 1023 703 1+0 = 1 (number changes on 1);
#X text 1007 744 mod: outputs remainder;
#X text 1004 758 circular arithmetic;
#X text 1009 771 a way of cleanly making loop;
#X text 1009 782 a way of wrapping numbers back past a maximum;
#X text 1028 795 12 images needs 13 for a remainder of 0;
#X text 593 885 Images are cycled through sequentially by file name alphanumerically;
#X text 399 940 a duplicate number box telling you what's going into the multimage. could be deleted and it would work the same - but serves a purpose for debugging.;
#X text 1073 635 integer 1 or 0 based on blinking;
#X text 326 468 This connects to a single library of 12 jpg images.;
#X text 333 509 To connect another library \, copy this section \, and then replace the library \, and use a float from a different source for the pix-multiimage;
#X text 362 637;
#X text 335 570 * in the open images message refers to a variable in the file name.;
#X text 284 745 for random images \, have a numerical variable in each file name (ie. 0 - 9) \, then the message would be random 9 \, then put the output of of that random into an integer before going into the multiimage;
#X text 956 1141 This xyz is coming from the lorenz calculation that was here before \, it is not connected to any bio sensors;
#X text 813 1813 this is expecting a 3D object - to do a flat rectangle \, I might need to map it onto a plane - google how to display an image in gem.;
#X text 1083 1320 Any time you see multiplication of signals think about scalers;
#X text 1021 1426 respiration affects skin.;
#X text 890 1622 couldn't get the alpha channel to work;
#X text 1027 1453 used Erin's nonnormative approach - all values are between 0 and 1;
#X text 13 1475;
#X text 421 1389 Arduino has normalized the values to a float value between 0 and 1;
#X text 398 1780 Heart generates a float between 0 and 3;
#X obj 353 1538;
#X connect 1 0 9 0;
#X connect 2 0 12 1;
#X connect 3 0 12 2;
#X connect 4 0 12 3;
#X connect 5 0 6 0;
#X connect 7 0 6 0;
#X connect 8 0 6 0;
#X connect 9 0 12 0;
#X connect 10 0 9 1;
#X connect 11 0 37 0;
#X connect 12 0 11 0;
#X connect 13 0 2 0;
#X connect 14 0 3 0;
#X connect 15 0 4 0;
#X connect 16 0 17 0;
#X connect 17 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 20 1 25 0;
#X connect 21 0 22 0;
#X connect 22 0 21 1;
#X connect 22 0 24 0;
#X connect 23 0 9 0;
#X connect 24 0 18 0;
#X connect 25 0 30 0;
#X connect 25 1 27 0;
#X connect 26 0 52 0;
#X connect 26 0 5 0;
#X connect 26 0 7 0;
#X connect 27 0 29 0;
#X connect 27 1 28 0;
#X connect 28 0 31 0;
#X connect 28 1 53 0;
#X connect 32 0 23 0;
#X connect 32 0 1 0;
#X connect 33 0 40 0;
#X connect 35 0 43 0;
#X connect 36 0 34 1;
#X connect 37 0 34 0;
#X connect 38 0 37 1;
#X connect 39 0 38 0;
#X connect 40 0 41 0;
#X connect 41 0 37 2;
#X connect 41 0 37 3;
#X connect 43 0 36 0;
#X connect 44 0 48 0;
#X connect 44 0 61 0;
#X connect 45 0 49 0;
#X connect 46 0 50 0;
#X connect 47 0 51 0;
#X connect 52 0 16 0;
#X connect 53 1 54 0;
#X connect 54 0 44 0;
#X connect 54 1 55 0;
#X connect 55 0 45 0;
#X connect 55 1 56 0;
#X connect 56 0 46 0;
#X connect 56 1 57 0;
#X connect 57 0 47 0;
#X connect 57 1 59 0;
#X connect 58 0 60 0;
#X connect 59 0 58 0;
#X connect 61 0 67 0;
#X connect 61 1 67 1;
#X connect 62 0 63 0;
#X connect 63 0 64 0;
#X connect 64 0 63 1;
#X connect 64 0 65 0;
#X connect 65 0 66 0;
#X connect 66 0 10 0;
#X connect 67 0 62 0;
